datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  role           Role      @default(USER)

  orders Order[]
  review Review[]

  // New relations
  debitors  Debitor[] // Relation to track debitors
  creditors Creditor[] // Relation to track creditors
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]
  address         Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Debitor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
  name      String // Name of the debitor
  amount    Float // Amount owed by the debitor
  items     String? // Description of items associated with the debt (optional)
  createdAt DateTime @default(now())
}

model Creditor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
  name      String // Name of the creditor
  amount    Float // Amount owed to the creditor
  items     String? // Description of items associated with the credit (optional)
  createdAt DateTime @default(now())
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  previousprice Float
  brand         String
  category      String
  instock       Boolean
  images        Image[]
  reviews       Review[]
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Int
  comment     String
  createdDate DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  brand       String
  selectedImg Image
  quantity    Int
  price       Float
}

type Image {
  color     String
  colorCode String
  image     String
}

type Address {
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}

enum Role {
  USER
  ADMIN
}
